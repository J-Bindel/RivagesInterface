"""
    Provides functions to compute the vulnerability map of a simulation and the corresponding geographical site.
"""

import os
import numpy as np
import re
import argparse
import sys
import flopy.utils.binaryfile as fpu
import math
import csv
import pandas as pd
import math
import flopy
import pickle
import statistics
from osgeo import gdal
from custom_utils import helpers_steady as helpers
import argparse
from osgeo import osr, ogr

__author__ = "June Sallou"
__maintainer__ = "June Sallou"
__credits__ = ["June Sallou"]
__license__ = "MIT"
__version__ = "0.0.1"
__date__ = "06/30/2020"
__email__ = "june.benvegnu-sallou@univ-rennes1.fr"


mainAppRepo = os.path.dirname(os.path.abspath(__file__)) + '/'

dc = 0.3  # depth of threshold for the undeground vulnerable zone
alpha = float(1/3)


def get_model_size(coord):
    r_dem = os.path.dirname(os.path.abspath(__file__)) + "/data/MNT_TOPO_BATH_75m.tif"
    xmin = coord[0]
    xmax = coord[1]
    ymin = coord[2]
    ymax = coord[3]
    dem = gdal.Open(r_dem)
    dem_geot = dem.GetGeoTransform()
    dem_Xpos = np.ones((dem.RasterXSize))
    dem_Ypos = np.ones((dem.RasterYSize))
    for i in range(0, dem.RasterYSize):
        yp = dem_geot[3] + (dem_geot[5] * i)
        dem_Ypos[i] = yp
    for j in range(0, dem.RasterXSize):
        xp = dem_geot[0] + (dem_geot[1] * j)
        dem_Xpos[j] = xp
    ulX = (np.abs(dem_Xpos - xmin)).argmin()
    lrX = (np.abs(dem_Xpos - xmax)).argmin()
    ulY = (np.abs(dem_Ypos - ymax)).argmin()
    lrY = (np.abs(dem_Ypos - ymin)).argmin()
    clip_dem_x = dem_Xpos[ulX:lrX]
    clip_dem_y = dem_Ypos[ulY:lrY]
    return ulY, lrY, ulX, lrX, clip_dem_x, clip_dem_y




def compute_vulnerability(site_number, chronicle, approx, rate, folder, ref, dc, alpha, timestep=1):

    model_name = helpers.get_model_name(site_number, chronicle, approx, rate, ref, perm=False)

    if folder is None:
        repo_simu = helpers.get_path_to_simulation_directory(site_number, chronicle, approx, rate, ref=ref, perm=False)
    else :
        site_name = helpers.get_site_name_from_site_number(site_number)
        print(site_name)
        repo_simu = folder + site_name + "/" + model_name

    topoSimu = helpers.get_soil_surface_values_for_a_simulation(repo_simu, model_name)

    simuHds = fpu.HeadFile(repo_simu + '/' + model_name + '.hds')
    hds_data = simuHds.get_data(kstpkper=(0,0))

    nbrowtot = hds_data.shape[1]        
    nbcoltot = hds_data.shape[2]

    saturated_zones = np.zeros(shape=(nbrowtot,nbcoltot))
    vulnerable_zones = np.zeros(shape=(nbrowtot,nbcoltot))

    for nrow in range(nbrowtot):
        for ncol in range(nbcoltot):

            Zs = topoSimu[nrow][ncol]
            h = helpers.getNonDryCellHdsValue(hds_data, nrow, ncol, hds_data.shape[0])
            d =  Zs - h
            if d<= dc:
                saturated_zones[nrow][ncol] = 1 
            vulnerable_zones[nrow][ncol] = helpers.getWeightToSurface(Zs, h, dc, alpha)
            #print(helpers.getWeightToSurface(Zs, h, dc, alpha))


    np.save(repo_simu + "/SaturationZones_" + site_name + "_Chronicle_"+ str(chronicle) + "_Approx_" + str(approx) + "_Rate_" + str(rate) + ".npy", saturated_zones)
    np.save(repo_simu + "/VulnerabilityZones_" + site_name + "_Chronicle_"+ str(chronicle) + "_Approx_" + str(approx) + "_Rate_" + str(rate) + ".npy", vulnerable_zones)


def get_clip_dem(coord):
    r_dem = os.path.dirname(os.path.abspath(__file__)) + "/data/MNT_TOPO_BATH_75m.tif"
    ulY, lrY, ulX, lrX, clip_dem_x, clip_dem_y = get_model_size(coord)
    dem = gdal.Open(r_dem)
    dem_geot = dem.GetGeoTransform()
    dem_data = dem.GetRasterBand(1).ReadAsArray()
    clip_dem = dem_data[ulY:lrY, ulX:lrX]
    return dem_geot, clip_dem_x, clip_dem_y, clip_dem


def save_clip_dem(site_number, sat, vul, folder, chronicle, approx, rate, ref):
    sites = pd.read_csv(os.path.dirname(os.path.abspath(__file__)) + "/data/study_sites.txt", sep=',', header=0, index_col=0)
    model_name = helpers.get_model_name(site_number, chronicle, approx, rate, ref, perm=False)
    site_name = helpers.get_site_name_from_site_number(site_number)
    repo_simu = folder + site_name + "/" + model_name

    coord = sites._get_values[site_number, 1:5]
    print(coord)
    geot, geotx, geoty, demData = get_clip_dem(coord)
    drv = gdal.GetDriverByName("GTiff")
    if sat:
        ds = drv.Create(repo_simu + '/' + "SaturationZones_" + site_name + "_Chronicle_"+ str(chronicle) + "_Approx_" + str(approx) + "_Rate_" + str(rate) +  '_MNT.tif',
                    demData.shape[1], demData.shape[0], 1, gdal.GDT_Float32)
    if vul:
        ds = drv.Create(repo_simu + '/' + "VulnerabilityZones_" + site_name + "_Chronicle_"+ str(chronicle) + "_Approx_" + str(approx) + "_Rate_" + str(rate) +  '_MNT.tif',
                    demData.shape[1], demData.shape[0], 1, gdal.GDT_Float32)
    srs = osr.SpatialReference()
    srs.ImportFromEPSG(2154)
    ds.SetProjection(srs.ExportToWkt())
    gt = [geotx[0], geot[1], 0, geoty[1], 0, geot[5]]
    ds.SetGeoTransform(gt)
    if sat:
        values = np.load(repo_simu + "/SaturationZones_Site_" + str(site_number) + "_Chronicle_"+ str(chronicle) + "_Approx_" + str(approx) + "_Rate_" + str(rate) + ".npy")
    if vul:
        values = np.load(repo_simu + "/VulnerabilityZones_Site_" + str(site_number) + "_Chronicle_"+ str(chronicle) + "_Approx_" + str(approx) + "_Rate_" + str(rate) + ".npy")
    # for i in values:
    #     print(i)
    ds.GetRasterBand(1).WriteArray(values)




if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    parser.add_argument("-chr", "--chronicle", type=int, required=True)
    parser.add_argument("-approx", "--approximation", type=int, required=False)
    parser.add_argument("-rate", "--rate", type=float, required=False)
    parser.add_argument("-site", "--sitenumber", type=int, required=True)
    parser.add_argument("-ref", "--ref", action='store_true')
    parser.add_argument("-step", "--step", type=int, required=False)
    parser.add_argument("-f", "--folder", type=str, required=False)
    parser.add_argument("-topo", "--topo", action='store_true')
    parser.add_argument("-perm", "--permanent", type=int, required=False)
    parser.add_argument("-noagg", "--noagg", action='store_true')
    parser.add_argument("-s", "--s", action='store_true')
    parser.add_argument("-v", "--v", action='store_true')


    args = parser.parse_args()

    approx = args.approximation
    chronicle = args.chronicle
    site_number = args.sitenumber
    rate = args.rate
    ref = args.ref
    folder = args.folder
    topo = args.topo
    perm = args.permanent
    noagg = args.noagg
    sat = args.s 
    vul = args.v 

    if sat or vul:
        save_clip_dem(site_number, sat, vul, folder, chronicle, approx, rate, ref)
    else:
        compute_vulnerability(site_number, chronicle, approx, rate, folder, ref, dc, alpha, timestep=1)